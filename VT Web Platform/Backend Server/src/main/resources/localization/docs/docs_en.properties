main-concepts.about-functionality.title=About the idea
main-concepts.about-functionality.text.p-1=The point of our application is to make it easier to learn application material in programming by using visualisation. Sometimes something more detailed and superfluous than just documentation is missing.
main-concepts.about-functionality.text.p-2=We propose the idea of creating and using visualised tasks. Any code can be accompanied by a visualisation scene to help you understand how it works. This will provide an additional source of information in learning programming.
main-concepts.about-functionality.text.p-3=Of course, creating such materials requires a certain development skill - to compose a task and describe the visualisation for it. This is why our system assigns a separate role to developers and task creators.
main-concepts.about-application.title=About the application
main-concepts.about-functionality.text.p-1-1=For creating and solving tasks, we suggest using our desktop application. Visit our 
main-concepts.about-application.link-text-1=github 
main-concepts.about-application.text.p-1-2=to get it.
main-concepts.about-application.text.p-2=It provides the functionality needed to create and solve tasks created within the platform.

developing.visualization.supported-visualizations.title=Supported visualization types
developing.visualization.supported-visualizations.text.p-1=The application currently supports the following libraries for visualisation:
developing.visualization.supported-visualizations.types-list.1=Swing
developing.visualization.supported-visualizations.types-list.2=JavaFX
developing.visualization.how-to-use.title=How to use
developing.visualization.how-to-use.text.p-1=Two files are provided to task developers for visualisation:
developing.visualization.how-to-use.files-list.1.name=visualization/CustomPanel.java
developing.visualization.how-to-use.files-list.1.description=a class extending the panel class from the graphics library used. Here you can override any methods to customize the panel behavior.
developing.visualization.how-to-use.files-list.2.name=visualization/VisualizationScenePanel
developing.visualization.how-to-use.files-list.2.description=a wrapper class above the CustomPanel instance to customize it.
developing.visualization.how-to-use.text.p-2-1=If you need classes that you will use inside the template classes, create them inside the 
developing.visualization.how-to-use.text.p-2.arg-1=visualisation 
developing.visualization.how-to-use.text.p-2-2=folder - then they will be automatically imported.
developing.visualization.visualization-scene-methods.title=VisualizationScenePanel methods
developing.visualization.visualization-scene-methods.text.p-2=The following methods are provided:
developing.visualization.visualization-scene-methods.methods-list.1.name=adjustControlButtons()
developing.visualization.visualization-scene-methods.methods-list.1.description=allows you to enable or disable control buttons for the visualisation scene. By default, all buttons are disabled. To disable, set false for the required variable from
developing.visualization.visualization-scene-methods.methods-list.1.vars.1=isStartEndButtonsEnabled
developing.visualization.visualization-scene-methods.methods-list.1.vars.2=isForwardBackStepButtonsEnabled
developing.visualization.visualization-scene-methods.methods-list.1.vars.3=isPlayPauseButtonsEnabled
developing.visualization.visualization-scene-methods.methods-list.1.vars-table.header-1=Variable name
developing.visualization.visualization-scene-methods.methods-list.1.vars-table.header-2=Description
developing.visualization.visualization-scene-methods.methods-list.1.vars-table.1-1=isStartEndButtonsEnabled
developing.visualization.visualization-scene-methods.methods-list.1.vars-table.1-2=Locks the fast-forward buttons to the beginning/end of the visualisation.
developing.visualization.visualization-scene-methods.methods-list.1.vars-table.2-1=isForwardBackStepButtonsEnabled
developing.visualization.visualization-scene-methods.methods-list.1.vars-table.2-2=Locks the step-up and step-back buttons.
developing.visualization.visualization-scene-methods.methods-list.1.vars-table.3-1=isPlayPauseButtonsEnabled
developing.visualization.visualization-scene-methods.methods-list.1.vars-table.3-2=Locks the play and pause buttons of the scene.
developing.visualization.visualization-scene-methods.methods-list.2.name=adjustEdgesCommands()
developing.visualization.visualization-scene-methods.methods-list.2.description=Allows you to adjust the visualization's extreme steps.
developing.visualization.visualization-scene-methods.methods-list.2.vars-table.header-1=Variable name
developing.visualization.visualization-scene-methods.methods-list.2.vars-table.header-2=Description
developing.visualization.visualization-scene-methods.methods-list.2.vars-table.1-1=inInitialStateCommand
developing.visualization.visualization-scene-methods.methods-list.2.vars-table.1-2=Selection of the initial step of the scene. If this variable is not defined, the first animation step will be used as the initial step. A function name from overridden VisualizationScenePanel class is used as a step.
developing.visualization.visualization-scene-methods.methods-list.2.vars-table.2-1=initialStepDelay
developing.visualization.visualization-scene-methods.methods-list.2.vars-table.2-2=The delay time for transition to the initial step.
developing.visualization.visualization-scene-methods.methods-list.2.vars-table.3-1=atSceneStartCommand
developing.visualization.visualization-scene-methods.methods-list.2.vars-table.3-2=Selection of the method that moves the scene to the beginning state. If no variable is defined, the function of the first animation step will be used. A function name from overridden VisualizationScenePanel class is used as a step.
developing.visualization.visualization-scene-methods.methods-list.2.vars-table.4-1=atStartStepDelay
developing.visualization.visualization-scene-methods.methods-list.2.vars-table.4-2=The delay time for transition to the beginning step.
developing.visualization.visualization-scene-methods.methods-list.2.vars-table.5-1=atSceneEndCommand
developing.visualization.visualization-scene-methods.methods-list.2.vars-table.5-2=Selection of the method that moves the scene to the end state. If no variable is defined, the function of the last animation step will be used. The function name from the overridden VisualizationScenePanel class is used as a step.
developing.visualization.visualization-scene-methods.methods-list.2.vars-table.6-1=atEndStepDelay
developing.visualization.visualization-scene-methods.methods-list.2.vars-table.6-2=The delay time for transition to the last step.
developing.visualization.visualization-scene-methods.methods-list.3.name=setPanelStyle()
developing.visualization.visualization-scene-methods.methods-list.3.description=A method which allows the panel to be customized. For customization, refer to the panel variable.
developing.visualization.visualization-scene-methods.methods-list.4.name=addComponents()
developing.visualization.visualization-scene-methods.methods-list.4.description=Allows you to add internal components to the panel. To add components, apply to the variable panel.
developing.visualization.adding-visual-step.title=Adding visual step
developing.visualization.adding-visual-step.text.p-1=To associate code with the rendering scene, you need to use the render registration method in your wrapper classes.
developing.visualization.adding-visual-step.text.p-2=Such commands take 3 arguments:
developing.visualization.adding-visual-step.args-list.header-1=Argument name
developing.visualization.adding-visual-step.args-list.header-2=Description
developing.visualization.adding-visual-step.args-list.1-1=nextStep
developing.visualization.adding-visual-step.args-list.1-2=The name of the function in VisualizationScenePanel , which will bring the scene into this visualization step.
developing.visualization.adding-visual-step.args-list.2-1=previousStep
developing.visualization.adding-visual-step.args-list.2-2=The name of the function in the VisualizationScenePanel that will switch the scene from this visualization step to the previous one (to rewind the steps).
developing.visualization.adding-visual-step.args-list.3-1=delay
developing.visualization.adding-visual-step.args-list.3-2=Delay between playing back the step (in milliseconds)

developing.wrapping.title=What are wrappers and how to implement them
developing.wrapping.text.p1=The basic idea is for the learner to use normal language syntax and simply solve the problem. But before executing in its solution, the classes and methods being learned and visualised will be replaced by the ones implemented by the task developer.
developing.wrapping.text.p2-1=So, in order to visualize how the code works, you need to write classes and functions that will perform the application functionality and call the visualization (this is described in more detail in the 
developing.wrapping.text.p2.arg-1=visualization
developing.wrapping.text.p2-2=).
developing.wrapping.text.p3=But you also need to define the fact of wrapping and specify what the original name of the wrapped object is. Code examples for different languages are given below:
developing.wrapping.wrapping-code-comment.for-class=Example for class
developing.wrapping.wrapping-code-comment.for-function=Example for function

developing.task-upload.title=How to upload a new task
education.task-upload.text.steps.1=First you need to create your account on the platform (it is compulsory for task creators)
education.task-upload.text.steps.2=Log in to your account in the app. To do this, use the account management tab in the menu.
education.task-upload.text.steps.3=In the project you want to upload as a task, go to the same account tab in the menu and click "Upload the task".
education.task-upload.text.steps.3.notes.1=You need to add all the information files to upload - don't be stingy with your task information!
education.task-upload.text.steps.3.notes.2=It is highly discouraged to change the location of files and folders - the task may not pass the server check.

education.task-download.title=How to download and open the task
education.task-download.text.steps.1-1=Go to the 
education.task-download.text.steps.1.search-page-arg=task search page 
education.task-download.text.steps.1-2=and download the archive with the task you like.
education.task-download.text.steps.2=Extract the archive to any folder on your device.
education.task-download.text.steps.3=Open this folder as a project in the app.

education.solution.solve-instruction.title=How to use it to solve the task
education.solution.solve-instruction.text.p1=Here you can read the standard instructions for solving the problem.
education.solution.solve-instruction.text.steps.1-1=Download and open the problem. This can be done using the following 
education.solution.solve-instruction.text.steps.1.instruction-arg=instructions
education.solution.solve-instruction.text.steps.1-2=.
education.solution.solve-instruction.text.steps.2=Familiarise yourself with the task information. To do this, examine all the information windows: the main information, the task statement and the study help.
education.solution.solve-instruction.text.steps.3=Open the file editor. A file with a code template and author's comments will be offered to you for solving. Propose your own solution, using the classes and materials studied.
education.solution.solve-instruction.text.steps.4=Launch your solution (the button is in the bottom right corner of the editor).
education.solution.solve-instruction.text.steps.5=Now you can use the visualisation stage to see how your program works. Use the stage controls to rewind steps or play animations. If your solution is successful, you will see a successful task window. Otherwise you know at which step the error occurred, and you will sort out the problem without much difficulty!


